plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id("com.palantir.docker") version "0.36.0"
}

group = 'com.fiiiiive'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}


repositories {
	maven { url 'https://jitpack.io' }
	mavenCentral()
}

dependencies {
	// boot
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// S3
	implementation group: 'io.awspring.cloud', name: 'spring-cloud-starter-aws', version: '2.4.2'

	// security + oauth
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.google.code.gson:gson'
	implementation 'org.springframework.security:spring-security-oauth2-client'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// socket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// swagger-ui
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// lombok
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.30'
	annotationProcessor('org.projectlombok:lombok')

	// iamport
	implementation 'com.github.iamport:iamport-rest-client-java:0.2.23'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// 변수 설정
def platform = project.hasProperty('platform') ? project.property('platform') : "frontend"

docker {
	if (platform == "frontend") {
		name "okqkrwhdtjd/frontend:"+version
		files "../frontend/dist"
		buildArgs(['DIST_DIR': "../"])
		dockerfile file("../cicd/Dockerfile_frontend")
	} else {
		name "okqkrwhdtjd/backend:"+version
		files tasks.bootJar.outputs.files
		buildArgs(['JAR_FILE':tasks.bootJar.outputs.files.singleFile.name])
		dockerfile file("../cicd/Dockerfile_backend")
	}
}

task buildDockerBackend(type: Exec) {
	workingDir project.rootDir
	commandLine 'gradlew.bat', 'docker','-Pplatform=backend'
}

task buildFrontend(type: Exec) {
	workingDir '../frontend'
	commandLine 'C:\\Program Files\\nodejs\\npm.cmd', 'run', 'build'
}

task buildDockerFrontend(type: Exec, dependsOn: buildFrontend){
	workingDir project.rootDir
	commandLine 'cmd', '/c', 'gradlew.bat', 'docker'
}

// bakcend start
task dockerComposeUpBackend(type: Exec, dependsOn: buildDockerBackend) {
	environment 'DOCKER_IMAGE_TAG', version
	commandLine 'docker-compose', '-f', '../cicd/docker-compose.yml', 'up', '--build', '-d'
}

// frontend start
task dockerComposeUpFrontend(type: Exec, dependsOn: buildDockerFrontend) {
	environment 'DOCKER_IMAGE_TAG', version
	commandLine 'docker-compose', '-f', '../cicd/docker-compose.yml', 'up', '--build', '-d'
}

// backend + frontend start
task buildAll(type: Exec, dependsOn: ['dockerComposeUpBackend', 'dockerComposeUpFrontend']) {
	doLast {
		println "Backend and frontend images are built and containers are up."
	}
}