name: frontend

on:
  push:
    branches:
      - dev

jobs:
  Deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스코드 복사 : 깃헙 레포지토리를 전체 복사
      - name: Checkout source code
        uses: actions/checkout@v3
			
      # 2. 의존성 패키지 캐싱
      # uses : GitHub Actions 마켓플레이스에서 제공하는 액션을 사용하겠다는 것
      # actions/cache@v3 : 파일, 디렉토리 캐싱하는 데 사용
      # with : 사용할 액션에 전달할 입력값들을 지정
      # path : 캐싱할 파일 또는 디렉토리의 경로를 지정
      # runner.OS : 실행 중인 러너의 운영 체제
      # hashFiles('**/package-lock')**는 package-lock 파일의 해시값을 계산해, 의존성 변경시 마다 새로운 캐시를 생성
      # restore-keys: 캐시 키가 정확히 일치하지 않을 경우 사용할 대체 키를 제공
      # {{ runner.OS }}-build- / {{ runner.OS }}- 는 일치하는 최신 캐시를 찾는 데 사용되는 대체 키
      - name: Cache node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
			
      # 3. 의존성 패키지 설치
      # steps.cache.outputs.cache-hit -: Cache node modules 단계에서 설정된 출력 값을 참조
      # cache 액션은 캐시 히트 여부를 cache-hit이라는 출력 값으로 반환
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
			
      # 4. npm build
      - name: Build with npm
        run : | 
          cd ./frontend
          npm run build
			
      # 5. AWS 인증
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6. AWS S3에 빌드 결과물 배포
      - name: Deploy to S3
        run: aws s3 sync ./frontend/build s3://${{ secrets.AWS_S3_NAME }} --delete

      # 7. CloudFront 캐시 무효화
      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_ID }} --paths "/*"
